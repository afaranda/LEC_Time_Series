return(mat[order(mat[,ncol(mat)], decreasing=decreasing),][1:threshold, -ncol(mat)])
}
else if(mode == 'percent'){
threshold<-ifelse(0 < threshold,
ifelse(threshold <= 100, threshold, 100),
100
)
n<-round((threshold * nrow(mat))/100)
print(n)
return(mat[order(mat[,ncol(mat)], decreasing=decreasing),][1:n, -ncol(mat)])
}
}
# Combat correct (sva) -- assumes all, or all but one columns are expression
# measurements -- apply combat batch correction to a data matrix
wrapCombat<-function(df, ft, groupCol=3, batchCol=4, idCol=1){
if(idCol !=0 | !is.null(idCol)){
idCol<-ifelse(is.character(idCol), colNum(x, idCol), idCol)
idtype<-names(df)[idCol]
samples<-setdiff(1:ncol(df), idCol)
row.names(df)<-df[,idCol]
df<-df[,samples]
}
batchCol<-ifelse(is.character(groupCol),
batchCol,
names(ft)[batchCol]
)
groupCol<-ifelse(is.character(groupCol),
groupCol,
names(ft)[groupCol]
)
ft[,groupCol]<-as.factor(ft[, groupCol])
model<-model.matrix(formula(paste('~', groupCol)), ft)
df<-ComBat(df, batch=ft[,batchCol], mod=model)
df[idtype]<-row.names(df)
row.names(df)<-1:nrow(df)
n<-ncol(df)
df<-df[,c(n, 1:n-1)]
df
}
wrapCombat_intOnly<-function(df, ft, groupCol=3, batchCol=4, idCol=1){
if(idCol !=0 | !is.null(idCol)){
idCol<-ifelse(is.character(idCol), colNum(df, idCol), idCol)
idtype<-names(df)[idCol]
samples<-setdiff(1:ncol(df), idCol)
row.names(df)<-df[,idCol]
df<-df[,samples]
}
batchCol<-ifelse(is.character(groupCol),
batchCol,
names(ft)[batchCol]
)
groupCol<-ifelse(is.character(groupCol),
groupCol,
names(ft)[groupCol]
)
ft[,groupCol]<-as.factor(ft[, groupCol])
model<-model.matrix(~1, data = ft)
df<-ComBat(df, batch=ft[,batchCol], mod=model)
df[idtype]<-row.names(df)
row.names(df)<-1:nrow(df)
n<-ncol(df)
df<-df[,c(n, 1:n-1)]
df
}
# ComBat introduces negative expression values, re-assign these to the
# minimum observed value.  This is required for log transformation
fixCombatNegatives<-function(df, idCol = 1){
mpv<-as.numeric(
as.matrix(
df[,setdiff(1:ncol(df), idCol)]
)
)
mpv<-min(mpv[mpv >0])
for(i in setdiff(1:ncol(df), idCol)){
df[df[,i]<0,i]<-mpv
}
df
}
# EdgeR Pairwise Contrast
edgeRPairwise<-function(
df, ft, idCol=1, sampCol=7, group.dn=c(1,2,3),
group.up=c(4,5,6), groupCol=8
){
print(group.dn)
idCol<-ifelse(is.character(idCol), colNum(df, idCol), idCol)
if(is.character(group.dn)){
group.dn<-as.numeric(row.names((ft[ft[,sampCol]%in% group.dn,])))
group.up<-as.numeric(row.names((ft[ft[,sampCol]%in% group.up,])))
}
if(is.numeric(group.dn)){
print(group.dn)
gr.dn<-ft[group.dn, sampCol]
print(group.up)
gr.up<-ft[group.up, sampCol]
}
row.names(df)<-df[,idCol]
counts<-df[, setdiff(1:ncol(df), idCol)]
samples<-c(gr.dn, gr.up)
counts<-counts[,samples]
y<-DGEList(
counts=counts,
group=droplevels(ft[c(group.dn, group.up), groupCol]),
genes=row.names(df)
)
# Filter DGEList: Remove genes where fewer than two samples have a cpm > 1
keep <- rowSums(cpm(y) > 1) >= 2
y.filter <-y[keep, ]
y.filter$samples$lib.size <- colSums(y.filter$counts) # Fix library size after filtering
# Calculate Normalization factors and dispersion estimates
y.filter <-calcNormFactors(y.filter)
y.filter <-estimateCommonDisp(y.filter, verbose=T)
y.filter <-estimateTagwiseDisp(y.filter)
# Calculate Differential Expression
et<-exactTest(y.filter, pair=levels(y.filter$samples$group))
degSet<-topTags(et, n=25000)@.Data[[1]]
return(list(y.filter, degSet))
}
# Function receives a matrix of expression values.  For each row,
# subtract the row mean and divide by the row standard deviation
scaleCenterByRow<-function(mat){
a<-apply(mat, 1, mean, na.rm=T)
s<-apply(mat, 1, sd, na.rm=T)
return((mat - a)/s)
}
x<-data.frame(
ID=c('A1','A2','A3','A4','A5','A6','A7','A8','A9','A10'),
Samp1=c(100,100,100,100,100,100,100,100,100,100),
Samp2=c(1000,800,200,400,600,500,500,100,900,0),
Samp3=c(1,1,1,1,1,1,1,1,1,1),
Samp4=c(2400,1600,2400,800,3200,400,400,800,3200,800),
stringsAsFactors=F
)
normGeneLength(mat = htseq_dge$counts, gt = htseq_dge$genes, TPM=F)
y<-normGeneLength(mat = htseq_dge$counts, gt = htseq_dge$genes, TPM=F)
head(y)
y<-normGeneLength(mat = htseq_dge$counts, gt = htseq_dge$genes, TPM=T)
head(y)
y<-normGeneLength(mat = htseq_dge$counts, gt = htseq_dge$genes, TPM=F)
head(y)
head(rpkm(htseq_dg))e
head(rpkm(htseq_dge))
head(rpkm(htseq_dge, gene.length = "Union_Length"))
x<-htseq_dge$counts[,1]
head(x)
x<-htseq_dge$counts[,1:2]
head(x)
sum(x[,1])
df<-data.frame(gene_id = rownames(x), counts = x[,1])
head(df)
df<-inner_join(df, htseq_dge$genes)
head(df)
df<-df[,1:3]
head(df)
df$rates<-df$counts/df$Union_Length
head(df)
df$RPKM<-(df$counts / sum(df$counts))
head(df)
df$RPKM<-(df$counts/df$Union_Length / sum(df$counts))
head(df)
df$RPKM<-(10^6 * df$counts/df$Union_Length / sum(df$counts))
head(df)
df$RPKM<-(10^7 * df$counts/df$Union_Length / sum(df$counts))
head(df)
df$RPKM<-(10^8 * df$counts/df$Union_Length / sum(df$counts))
head(df)
df$RPKM<-(10^9 * df$counts/df$Union_Length / sum(df$counts))
head(df)
df$RPKM<-(10^9 * df$counts/df$Union_Length / sum(df$rates))
head(df)
df$RPKM<-(10^6 * df$counts/df$Union_Length / sum(df$rates))
head(df)
sum(df$RPKM)
y<-normGeneLength(mat = htseq_dge$counts, gt = htseq_dge$genes, TPM=F)
head(y)
normGeneLength<-function(
mat,                    # Count matrix to normalize
ft = ft,                # File table with th sample metadata
ft_id = "Sample",       # Name of column in "ft" listing sample ID's
gt = genes,             # Table of gene metadata
gt_id = "gene_id",      # Name of column gt listing gene ID's
gt_ln = "Union_Length", # Name of column listing gene lengths
TPM = T,                # If true calculate TPM, otherwise FPKM
ReadLen = NULL,         # If not null, Column in "ft" with Read Lengths
Paired  = NULL          # If not null, Column in "ft" paired vs single
) {
if(TPM){
norm<-function(x, s){
rl <- 0
gt$l <-gt[,gt_ln]
if(!is.null(ReadLen)){
rl<-ft[ft[,ft_id] == s, ReadLen]
if(!is.null(Paired)){
rl<- rl * ifelse(ft[ft[,ft_id] == s, ReadLen], 2, 1)
}
gt$l<-gt$l - rl + 1
}
tpm <- x / gt$l
tpm <- (tpm * 10^6)/sum(tpm)
tpm
}
for(s in colnames(mat)){
mat[,s]<-norm(mat[,s], s)
}
return(mat)
} else {
norm<-function(x, s){
rl <- 0
gt$l <-gt[,gt_ln]
if(!is.null(ReadLen)){
rl<-ft[ft[,ft_id] == s, ReadLen]
if(!is.null(Paired)){
rl<- rl * ifelse(ft[ft[,ft_id] == s, ReadLen], 2, 1)
}
gt$l<-gt$l - rl + 1
}
rpkm <- x / gt$l
rpkm <- (rpkm * 10^9) /sum(x)
rpkm
}
for(s in colnames(mat)){
mat[,s]<-norm(mat[,s], s)
}
return(mat)
}
}
y<-normGeneLength(mat = htseq_dge$counts, gt = htseq_dge$genes, TPM=F)
head(y)
head(rpkm(htseq_dge, gene.length = "Union_Length"))[,1:2]
head(y)[,1:2]
y<-normGeneLength(mat = htseq_dge$counts, gt = htseq_dge$genes, TPM=T)
head(y)[,1:2]
head(df)
list.files()
load("GeneLengthRable.Rdata")
load("GeneLengthTable.Rdata")
ls()
rm(list=ls())
ls()
if(length(list.files(pattern = "GeneLengthTable.Rdata"))>0){
print("FOO")
load("GeneLengthTable.Rdata")
} else {
lt<-lengthTable(gtfpath)
}
ft<-hc_getFileTable(dirList=dl)
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
# Join count data columns into a matrix
hc_buildDataFrame<-function(ds, ft, idCol=1, measCol=2){
df<-data.frame(Ensembl=ds[[1]][,idCol], stringsAsFactors=F)
for( i in 1:nrow(ft)){
if(!any(df$Ensembl != ds[[ft[i,1]]][,idCol])){in
df<-merge(df, ds[[ft[i,1]]][,c(idCol, measCol)],
by.x='Ensembl', by.y=1,
sort = F)
names(df)[grep('V2', names(df))]<-ft[i,1]
}
else{
print(sum(df$Ensembl != ds[[ft[i,1]]][,idCol]))
print(paste("Can't join sample:",sample, "ID Mismatch" ))
}
}
df<- df %>% filter(!grepl("__",Ensembl))
row.names(df)<-df$Ensembl
df<-df[order(df[,"Ensembl"]),]
dm<-as.matrix(df[,!grepl("Ensembl", names(df))])
list(ft, dm)
}
hc_buildDataFrame<-function(ds, ft, idCol=1, measCol=2){
df<-data.frame(Ensembl=ds[[1]][,idCol], stringsAsFactors=F)
for( i in 1:nrow(ft)){
if(!any(df$Ensembl != ds[[ft[i,1]]][,idCol])){
df<-merge(df, ds[[ft[i,1]]][,c(idCol, measCol)],
by.x='Ensembl', by.y=1,
sort = F)
names(df)[grep('V2', names(df))]<-ft[i,1]
}
else{
print(sum(df$Ensembl != ds[[ft[i,1]]][,idCol]))
print(paste("Can't join sample:",sample, "ID Mismatch" ))
}
}
df<- df %>% filter(!grepl("__",Ensembl))
row.names(df)<-df$Ensembl
df<-df[order(df[,"Ensembl"]),]
dm<-as.matrix(df[,!grepl("Ensembl", names(df))])
list(ft, dm)
}
setwd('/home/adam/Documents/LEC_Time_Series')
library(dplyr)
library(cluster)
library(reshape2)
wd<-getwd()
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
source('PreprocessingFunctions.R')
source(paste(wd,'/PrincipalComponents.R', sep=''))
source('ClusteringFunctions.R')
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
source('transcriptoimc_analysis_scripts/PreprocessingFunctions.R')
source('transcriptomic_analysis_scripts/PrincipalComponents.R', sep='')
source('transcriptomic_analysis_scripts/ClusteringFunctions.R')
source('~/Documents/LEC_Time_Series/transcriptomic_analysis_scripts/PreprocessingFunctions.R')
source('transcriptomic_analysis_scripts/PreprocessingFunctions.R')
source('transcriptomic_analysis_scripts/PrincipalComponents.R', sep='')
source('transcriptomic_analysis_scripts/PrincipalComponents.R')
source('transcriptomic_analysis_scripts/ClusteringFunctions.R')
ftt<-st_getFileTable(dll, wd=".")
ftt<-st_getFileTable(dll, wd=".")
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
ftt<-st_getFileTable(dll, wd=".")
ftt
ftt
ftt<-st_getFileTable(dll, wd=".")
library(dplyr)
library(cluster)
library(reshape2)
wd<-getwd()
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
source('transcriptomic_analysis_scripts/PreprocessingFunctions.R')
source('transcriptomic_analysis_scripts/PrincipalComponents.R')
source('transcriptomic_analysis_scripts/ClusteringFunctions.R')
parse("Lab==DBI")
eval("Lab==DBI")
parse(text="Lab==DBI")
parse(text="Lab=='DBI'")
bg<-st_sewBallGown(ftt)
bg
subset(bg, "Lab='DBI'", genomesubset=F)
subset(bg, "Lab=='DBI'", genomesubset=F)
subset(bg, "Genotype=='WT'", genomesubset=F)
ft<-hc_getFileTable(dirList=dl)
ds<-hc_loadFiles(ft)
ft<-hc_identifierConsistency(ds, ft)
htseq_count<-hc_buildDataFrame(ds, ft)
htseq_dge<-buildDGE(htseq_count[[2]], ft=ft,
gt=data.frame(lt %>%
group_by(gene_id) %>%
summarise(Union_Length = dplyr::first(Union_Length)
)
)
)
ft<-hc_getFileTable(dirList=dl)
ds<-hc_loadFiles(ft)
setwd('/home/adam/Documents/LEC_Time_Series')
library(dplyr)
library(cluster)
library(reshape2)
wd<-getwd()
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
source('transcriptomic_analysis_scripts/PreprocessingFunctions.R')
source('transcriptomic_analysis_scripts/PrincipalComponents.R')
source('transcriptomic_analysis_scripts/ClusteringFunctions.R')
if(length(list.files(pattern = "GeneLengthTable.Rdata"))>0){
load("GeneLengthTable.Rdata")
} else {
lt<-lengthTable(gtfpath)
}
lt
ft<-hc_getFileTable(dirList=dl)
ds<-hc_loadFiles(ft)
ft<-hc_identifierConsistency(ds, ft)
htseq_count<-hc_buildDataFrame(ds, ft)
htseq_dge<-buildDGE(htseq_count[[2]], ft=ft,
gt=data.frame(lt %>%
group_by(gene_id) %>%
summarise(Union_Length = dplyr::first(Union_Length)
)
)
)
ds<-hc_loadFiles(ft)
ft
ds<-hc_loadFiles(ft)
dl<-c(
"/home/adam/Documents/LTS_Data/DBI_NoTrim_HTSeq_Count_Gene",
"/home/adam/Documents/LTS_Data/DNA_Link_NoTrim_HTSeq_Count_Gene"
)
ft<-hc_getFileTable(dirList=dl)
ds<-hc_loadFiles(ft)
ds<-hc_loadFiles(ft)
file<-paste(ft[i,2], ft[i,3], sep='/')
i=1
file<-paste(ft[i,2], ft[i,3], sep='/')
filr
file
ft
dl
ft<-hc_getFileTable(dirList=dl)
ft
setwd('/home/adam/Documents/LEC_Time_Series')
library(dplyr)
library(cluster)
library(reshape2)
wd<-getwd()
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
source('transcriptomic_analysis_scripts/PreprocessingFunctions.R')
source('transcriptomic_analysis_scripts/PrincipalComponents.R')
source('transcriptomic_analysis_scripts/ClusteringFunctions.R')
ft<-hc_getFileTable(dirList=dl)
ft
ds<-hc_loadFiles(ft)
ft<-hc_identifierConsistency(ds, ft)
ft
bg
head(rpkm(bg))
bg$rpkm
htseq_count<-hc_buildDataFrame(ds, ft)
htseq_dge<-buildDGE(htseq_count[[2]], ft=ft,
gt=data.frame(lt %>%
group_by(gene_id) %>%
summarise(Union_Length = dplyr::first(Union_Length)
)
)
)
ft
head(htseq_count[[1]])
head(htseq_count[[2]])
ds<-hc_loadFiles(ft)
names(ds)
ds
ft
hc_loadFiles<-function(ft){
dataSets<-list()
for(i in 1:nrow(ft)){
file<-paste(ft[i,2], ft[i,3], sep='/')
print(ft[i,1])
sample<-ft[i,1]
print(file)
dataSets[[sample]]<-read.table(
file, header=F, stringsAsFactors=F, sep='\t'
)
}
dataSets
}
ds<-hc_loadFiles(ft)
ft
class(ft$1)
class(ft[,1])
hc_getFileTable <-function(
wd = ".",
dirList, pattern='_GeneCount.txt',
filename="HtSeq_GeneCountFiles.csv"
){
if(filename %in% list.files(wd)){
ft<-read.csv(filename, stringsAsFactors = F)
}
else{
ft<-data.frame(
sample = character(),
directory=character(),
filename=character(),
stringsAsFactors=F
)
for (d in dirList){
list.files(d, pattern)
x<-data.frame(
sample =  gsub(pattern, "", list.files(d, pattern)),
directory = d,
filename = list.files(d, pattern),
stringsAsFactors=F
)
ft<-rbind(ft, x)
}
#write.csv(ft, filename, row.names=F)
}
return(ft)
}
ds<-hc_loadFiles(ft)
class(ft[,1])
ft<-hc_getFileTable(dirList=dl)
class(ft[,1])
ft<-hc_identifierConsistency(ds, ft)
class(ft[,1])
htseq_count<-hc_buildDataFrame(ds, ft)
htseq_count<-hc_buildDataFrame(ds, ft)
names(ds)
class(ft[,1])
ds<-hc_loadFiles(ft)
htseq_count<-hc_buildDataFrame(ds, ft)
htseq_dge<-buildDGE(htseq_count[[2]], ft=ft,
gt=data.frame(lt %>%
group_by(gene_id) %>%
summarise(Union_Length = dplyr::first(Union_Length)
)
)
)
htseq_dge
subset(htseq_dge, "Genotype == 'WT'")
subset(htseq_dge, "Genotype == Hours_PCS >0")
subset(htseq_dge, "Hours_PCS >0")
subset(htseq_dge, "Hours_PCS > 0")
htseq_dge[,1:5]
htseq_dge[,ft$Genotype == "WT"]
nrow(htseq_dge[,ft$Genotype == "WT"])
ncol(htseq_dge[,ft$Genotype == "WT"])
y<-htseq_dge[,ft$Genotype == "WT"]
pData(y)
y$samples
model.matrix(ft$Genotype)
model.matrix(ft)
model.matrix(Genotype, ft)
model.matrix(Lab ~ Genotype, ft)
model.matrix(~ Genotype, ft)
model.matrix(~ Genotype, ft)
model.matrix(0~ Genotype, ft)
model.matrix(~0+Genotype, ft)
model.matrix(~0+Hours_PCS, ft)
model.matrix(~Hours_PCS, ft)
model.matrix(~0+as.factor(Hours_PCS), ft)
library(qvalue)
install.packages(qvalue)
install.packages('qvalue')
BiocInstaller::biocLite('qvalue')
library(qvalue)
