?RSQLite
db<-dbConnect(SQLite)
db<-dbConnect(SQLite, "Test")
db<-dbConnect(drv=SQLite, "Test")
db<-dbConnect(drv="SQLite", "Test")
db<-dbConnect()
db<-dbConnect(SQLite(), "Test")
db
list.files()
db<-dbConnect(SQLite(), "Test.sqlite")
list.files()
db<-dbConnect(SQLite(), "")
list.files()
-5:5
length(-5:5)
length(-4:5)
length(-5:1, 1:5)
c(-5:-1, 1:5)
db<-dbConnect(SQLite(), "")
df<-data.frame(
"Gene" = paste('Gene',1:10),
"logFC" = c(-5:-1, 1:5),
"FDR" = c(0.01, 0.02, 0.05, 0.049)
)
seq(c(0.01, 0.02, 0.05, 0.049))
seq_along(c(0.01, 0.02, 0.05, 0.049))
seq_along(c(0.01, 0.02, 0.05, 0.049), 1)
seq_along(c(0.01, 0.02, 0.05, 0.049))
db<-dbConnect(SQLite(), "")
df<-data.frame(
"Gene" = paste('Gene',1:10),
"logFC" = c(-5:-1, 1:5),
"FDR" = c(0.01, 0.02, 0.05, 0.049)[c(1:4,1:4,1,2)]
)
df
db<-dbConnect(SQLite(), "Test.sqlite")
?dbWriteTable
dbWriteTable(db, "DEG", df)
db<-dbConnect(SQLite(), "Test.sqlite")
df<-data.frame(
"Gene" = paste('Gene',1:10),
"logFC" = c(-5:-1, 1:5),
"FDR" = c(0.01, 0.02, 0.05, 0.049)[c(1:4,1:4,1,2)]
)
dbWriteTable(db, "DEG", df)
dbWriteTable(db, "DEG", df, overwrite = T)
dbSendQuery(
db, "SELECT Gene FROM DEG"
)
dbSendQuery(
db, "SELECT * FROM DEG"
)
res<-dbSendQuery(
db, "SELECT * FROM DEG"
)
res
dbClearResult(res)
res<-dbSendQuery(
db, "SELECT * FROM DEG"
)
res
for(r in res){print(r)}
res
dbFetch(res)
dbFetch(res)
dbFetch(res)
BiocManager::install('plotrix')
df<-data.frame(
name=paste('term',rep(c(1,2), each=4), sep='_'),
size = c(10,10,10,10,20,20,20,20),
change = factor(
c('up', 'up', 'dn', 'dn', 'up', 'up','up','dn' )
)
)
df
library(ggplot2)
ggplot(df, aes(group=name, y=change))
ggplot(df, aes(group=name, y=change)) + geom_bar()
ggplot(df, aes(group=name, y=change)) + geom_circle()
ggplot(df, aes(group=name, y=change)) + geom_ribbon()
ggplot(df) + geom_bar(aes(x=name, y=change))
ggplot(df, aes(x=name, y=change)) + geom_bar()
ggplot(df, aes(group=name, y=change)) + geom_bar()
ggplot(df, aes(group=size, y=change)) + geom_bar()
ggplot(df, aes(y=name)) + geom_bar()
ggplot(df, aes(y=name, size=size)) + geom_bar()
ggplot(df, aes(y=name, color=size)) + geom_bar()
ggplot(df, aes(y=name, fill=size)) + geom_bar()
ggplot(df, aes(y=name, fill=size)) + geom_stacked()
ggplot(df, aes(y=name, fill=size)) + geom_point()
ggplot(df, aes(x=name, y=change, fill=size)) + geom_point()
ggplot(df, aes(x=name, y=change, fill=size)) + geom_point() + geom_bar()
ggplot(df) + geom_bar(aes(x=name, y=change))
gg_dot
library(ggfortify)
gg_dot
library(ggplotify)
gg_dot
library('zoo')
df <- data.frame(condition = rep(LETTERS[1:4], each = 5),
E = rep(1:5, times = 4),
avg = rnorm(20),
se = .3)
# plotting command
ggplot(data = df, aes(x = E,
y = avg,
color = condition,
linetype = condition,
shape = condition,
fill = condition)) +
geom_line(size=1) +
geom_point(size=5) +
scale_color_manual(values = c(A = "red", B = "red", C = "blue", D = "blue"),
guide = "none") +
scale_linetype_manual(values = c(A = "solid", B = "dashed", C = "solid", D = "dashed"),
guide = "none") +
scale_shape_manual(values = c(A = 24, B = 24, C = 21, D = 21),
guide = "none") +
scale_fill_manual(values = c(A = "white", B = "red", C = "white", D = "blue"),
guide = "none") +
geom_errorbar(aes(x = E, ymin = avg-se, ymax = avg+se, color = NULL, linetype = NULL),
width=.1, position=position_dodge(width = .1))
# plotting command
ggplot(data = df, aes(x = E,
y = avg,
color = condition,
linetype = condition,
shape = condition,
fill = condition)) +
geom_bar(size=1) +
geom_point(size=5) +
scale_color_manual(values = c(A = "red", B = "red", C = "blue", D = "blue"),
guide = "none") +
scale_linetype_manual(values = c(A = "solid", B = "dashed", C = "solid", D = "dashed"),
guide = "none") +
scale_shape_manual(values = c(A = 24, B = 24, C = 21, D = 21),
guide = "none") +
scale_fill_manual(values = c(A = "white", B = "red", C = "white", D = "blue"),
guide = "none") +
geom_errorbar(aes(x = E, ymin = avg-se, ymax = avg+se, color = NULL, linetype = NULL),
width=.1, position=position_dodge(width = .1))
# plotting command
ggplot(data = df, aes(x = E,
y = avg,
color = condition,
linetype = condition,
shape = condition,
fill = condition)) +
geom_line(size=1) +
geom_point(size=5) +
scale_color_manual(values = c(A = "red", B = "red", C = "blue", D = "blue"),
guide = "none") +
scale_linetype_manual(values = c(A = "solid", B = "dashed", C = "solid", D = "dashed"),
guide = "none") +
scale_shape_manual(values = c(A = 24, B = 24, C = 21, D = 21),
guide = "none") +
scale_fill_manual(values = c(A = "white", B = "red", C = "white", D = "blue"),
guide = "none") +
geom_errorbar(aes(x = E, ymin = avg-se, ymax = avg+se, color = NULL, linetype = NULL),
width=.1, position=position_dodge(width = .1))
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
# Stacked + percent
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="fill", stat="identity")
data
ggplot(data, aes(fill=condition, x=value, y=specie)) +
geom_bar(position="fill", stat="identity")
# Stacked + percent
ggplot(data, aes(fill=condition, x=value, y=specie)) +
geom_bar(position="fill", stat="identity") +geom_point()
# Stacked + percent
ggplot(data, aes(fill=condition, x=value, y=specie)) +
geom_bar(position="fill", stat="identity") + geom_point(aes(x=1))
# Stacked + percent
ggplot(data, aes(fill=condition, x=value, y=specie)) +
geom_bar(position="fill", stat="identity") + geom_point(aes(x=0))
# Stacked + percent
ggplot(data, aes(fill=condition, x=value, y=specie)) +
geom_bar(position="fill", stat="identity") + geom_point(aes(x=0, dodge= 0.5))
## ensembldb provides access to gene annotations through the
## annotationHub database
library(ensembldb)
# Small Example Set Of Genes
genes<-c(
'ENSMUSG00000000001', 'ENSMUSG00000000003',
'ENSMUSG00000000028', 'ENSMUSG00000000031',
'ENSMUSG00000000037', 'ENSMUSG00000000049',
'ENSMUSG00000000056', 'ENSMUSG00000000058',
'ENSMUSG00000000078', 'ENSMUSG00000000085'
)
genes
## Get the Annotation set for the Mouse Ensembl 98 Genome
ah<-AnnotationHub()                        # Initialize Connection
## ensembldb provides access to gene annotations through the
## annotationHub database
library(ensembldb)
library(AnnotationHub)
## Get the Annotation set for the Mouse Ensembl 98 Genome
ah<-AnnotationHub()                        # Initialize Connection
AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))  #Query Database
## ensembldb provides access to gene annotations through the
## annotationHub database
library(AnnotationHub)
# Small Example Set Of Genes
genes<-c(
'ENSMUSG00000000001', 'ENSMUSG00000000003',
'ENSMUSG00000000028', 'ENSMUSG00000000031',
'ENSMUSG00000000037', 'ENSMUSG00000000049',
'ENSMUSG00000000056', 'ENSMUSG00000000058',
'ENSMUSG00000000078', 'ENSMUSG00000000085'
)
##############################################################################
##                                                                           #
##         Get the Annotation set for the Mouse Ensembl 98 Genome            #
##                                                                           #
##############################################################################
ah<-AnnotationHub()                        # Initialize Connection
# Search Database for the appropriate data set -- look for the "name()" field
# in the output
AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
# Select the appropriate dataset
edb <- ah[['AH75036']]
# View available columns for this data set
columns(edb)
# We need two columns -- SYMBOL and DESCRIPTION
# Will use GENEID as the Key
AnnotationDbi::select(
edb, keys=genes,
columns = c("SYMBOL", "DESCRIPTION"),
keytype = "GENEID"
)
# We need two columns -- SYMBOL and DESCRIPTION
# Will use GENEID as the Key
AnnotationDbi::select(
edb, keys=genes,
columns = c("SYMBOL", "DESCRIPTION",  "GENENAME"),
keytype = "GENEID"
)
annot<-select(
edb, keys=genes,
columns = c("SYMBOL", "DESCRIPTION"),
keytype = "GENEID"
)
annot
class(annot)
detach(ensemldb)
detach('ensemldb')
detach(package:ensembldb, unload=T)
detach(package:ensembldb, unload=T)
## ensembldb provides access to gene annotations through the
## annotationHub database
library(AnnotationHub)
# Small Example Set Of Genes
genes<-c(
"ENSG00000000003",
'ENSG00000000005',
'ENSG00000000419',
'ENSG00000000457',
'ENSG00000000460',
'ENSG00000000938',
'ENSG00000000971',
'ENSG00000001036',
'ENSG00000001084',
'ENSG00000001167'
)
##############################################################################
##                                                                           #
##         Get the Annotation set for the Mouse Ensembl 98 Genome            #
##                                                                           #
##############################################################################
ah<-AnnotationHub()                        # Initialize Connection
# Search Database for the appropriate data set -- look for the "name()" field
# in the output
AnnotationHub::query(ah, pattern=c("EnsDb", "Homo sapiens", "98"))
# Select the appropriate dataset
edb <- ah[['AH75011']]
# View available columns for this data set
columns(edb)
annot<-select(
edb, keys=genes,
columns = c("SYMBOL", "DESCRIPTION"),
keytype = "GENEID"
)
annot
library(edgeR)
library(pheatmap)
library(edgeR)
library(pheatmap)
setwd('/home/adam/Documents/LEC_Time_Series')
min_lfc=4                                          # log fold change threshold
min_cpm=0.50                                       # Minimum overall abundance
max_cpm=20                                        # Maximum overall abundance
output_prefix="lfc4"                        # Prefix for output files
dgeFile="LTS_DGEList.Rdata"                   # Rdata file with dgelist object
## Helper Function filters a count matrix by given criteria
filterCPMmat<-function(
object = dge, samples = wt_samples, func=cpm,
lfc = 3, min_log_cpm = 0, max_log_cpm = 100, include_genes = biosig$gene_id,
lfc_columns = paste('logFC', LETTERS[1:4], sep="."), deg_table = deg
){
ecpm<-func(object, log = T)        # Generate a gene x sample log CPM matrix
# Filter differential expression table by fold change and abundance
dt<-deg_table[
apply(deg_table[,lfc_columns],
1, function(x, l=lfc) any(abs(x) > l)),
]
dt<-dt[dt$logCPM > min_log_cpm & dt$logCPM < max_log_cpm, ]
dt<-dt[dt$FDR < 0.05, ]
# If a subset of genes is provided, take the intersection
if (!is.null(include_genes)){
genes<-intersect(dt$gene_id, include_genes)
} else{
genes<-dt$gene_id
}
return(ecpm[genes, samples])
}
######################### Load and Prepare Data ##############################
load(dgeFile)
s<-master$samples[master$samples$genotype == "WT",'sample']
dge<-master[,s]
design<-model.matrix(~interval + batch, dge$samples)
colnames(design)<-gsub("interval", '', colnames(design))
keep<-filterByExpr(dge, design)
dge<-dge[keep,,keep.lib.sizes=F]
# Normalize and Estimate Dispersions
dge<-calcNormFactors(dge)
dge<-estimateDisp(dge, design, robust = T)
# Calcuate Statistical Significance (Gene DE at ANY Timepoint)
fit<-glmQLFit(dge, design)
qlf<-glmQLFTest(fit, coef=2:5)
deg<-as.data.frame(topTags(qlf, n=Inf))
# construct datExpr and datTraits using filteredGenes
datExpr<-t(
filterCPMmat(
object = dge, samples=dge$samples$sample, lfc=min_lfc,
min_log_cpm = min_cpm, max_log_cpm = max_cpm, func=cpm,
lfc_columns = paste('logFC', c('6H', '24H', '48H', '120H'), sep="."),
deg_table = deg, include_genes = NULL
)
)
# remove columns that hold information we do not need.
allTraits = dge$samples[, -c(1,2,3,5,6,8,9,10,11)];
row.names(allTraits)<-allTraits$sample
modbatch<-model.matrix(~ 0 + batch, allTraits)
modhours<-model.matrix(~ 0 + interval, allTraits)
allTraits<-merge(allTraits, modhours, by='row.names')
row.names(allTraits)<-allTraits$Row.names
allTraits<-allTraits[-1]
allTraits<-merge(allTraits, modbatch,by='row.names')
rownames(allTraits)<-allTraits$sample
allTraits<-allTraits[-1]
allTraits<-allTraits[,-c(1,2,3)]
names(allTraits)<-gsub("batch", "", names(allTraits))
names(allTraits)<-gsub("interval", "", names(allTraits))
head(cpm(dge))
head(counts(dge))
head((dge$counts))
row.names(dge$counts)
rownames(dge$counts)
rownames(head(dge$counts))
head((dge$counts))
rownames(head(dge$counts))
#################### Generate Line Plots For Each Module #####################
?hclust
dist
?dist
x<-dist(datExpr)
x
x<-dist(t(datExpr))
x
#################### Generate Line Plots For Each Module #####################
h<-hclust(dist(t(datExpr)))
plot(h)
tabulate_H_Clusters<-function(h, ks=c(1:5) ){
hc_table <- data.frame(
Sample = h$labels
)
for (k in ks){
print(k)
if(k <= nrow(hc_table)){
c=data.frame(c=cutree(h, k))
c$Sample = row.names(c)
hc_table<-merge(
hc_table, c,
by = 'Sample'
)
name<-paste("k_eq_", k, sep='')
names(hc_table)[grep('c', names(hc_table))]<-name
}
}
row.names(hc_table)<-hc_table$Sample
hc_table<-hc_table[,setdiff(1:ncol(hc_table), grep('Sample', names(hc_table)))]
hc_table
}
tab<-tabulate_H_Clusters(h)
tab
c = 5
g<-row.names(tab[tab$k_eq_5 == c])
g<-row.names(tab[tab$k_eq_5 == c,])
g
for(c in 1:5){
n<-labels2colors(c)
g<-row.names(tab[tab$k_eq_5 == c,])
x<-melt(
dt[,c(g, 'interval'),with=F][,lapply(.SD, mean), by=interval],
id.vars = 'interval'
)
fn<-paste(
output_prefix,
n, "Module_Lineplot.png",
sep="_"
)
ttl<-paste(n, length(g))
ggplot(x, aes(x=interval, y=value, color=variable, group=variable)) +
geom_line() + theme(legend.position = 'none') + ggtitle(ttl)
ggsave(fn)
}
library(WGCNA)
for(c in 1:5){
n<-labels2colors(c)
g<-row.names(tab[tab$k_eq_5 == c,])
x<-melt(
dt[,c(g, 'interval'),with=F][,lapply(.SD, mean), by=interval],
id.vars = 'interval'
)
fn<-paste(
output_prefix,
n, "Module_Lineplot.png",
sep="_"
)
ttl<-paste(n, length(g))
ggplot(x, aes(x=interval, y=value, color=variable, group=variable)) +
geom_line() + theme(legend.position = 'none') + ggtitle(ttl)
ggsave(fn)
}
library(data.table)
#################### Generate Line Plots For Each Module #####################
library(data.table)
library(ggplot2)
dt<-data.table(merge(datExpr, dge$samples, by='row.names'))
for(c in 1:5){
n<-labels2colors(c)
g<-row.names(tab[tab$k_eq_5 == c,])
x<-melt(
dt[,c(g, 'interval'),with=F][,lapply(.SD, mean), by=interval],
id.vars = 'interval'
)
fn<-paste(
output_prefix,
n, "Module_Lineplot.png",
sep="_"
)
ttl<-paste(n, length(g))
ggplot(x, aes(x=interval, y=value, color=variable, group=variable)) +
geom_line() + theme(legend.position = 'none') + ggtitle(ttl)
ggsave(fn)
}
#################### Generate Line Plots For Each Module #####################
h<-hclust(dist(t(datExpr), method = "manhattan"))
tab<-tabulate_H_Clusters(h)
for(c in 1:5){
n<-labels2colors(c)
g<-row.names(tab[tab$k_eq_5 == c,])
x<-melt(
dt[,c(g, 'interval'),with=F][,lapply(.SD, mean), by=interval],
id.vars = 'interval'
)
fn<-paste(
output_prefix,
n, "HClust_Lineplot.png",
sep="_"
)
ttl<-paste(n, length(g))
ggplot(x, aes(x=interval, y=value, color=variable, group=variable)) +
geom_line() + theme(legend.position = 'none') + ggtitle(ttl)
ggsave(fn)
}
# Function receives a matrix of expression values.  For each row,
# subtract the row mean and divide by the row standard deviation
scaleCenterByRow<-function(mat){
a<-apply(mat, 1, mean, na.rm=T)
s<-apply(mat, 1, sd, na.rm=T)
return((mat - a)/s)
}
scaleCenterByRow(t(datExpr))
#################### Generate Line Plots For Each Module #####################
h<-hclust(dist(scaleCenterByRow(t(datExpr)), method = "manhattan"))
tab<-tabulate_H_Clusters(h)
#################### Generate Line Plots For Each Module #####################
library(data.table)
library(ggplot2)
dt<-data.table(merge(datExpr, dge$samples, by='row.names'))
for(c in 1:5){
n<-labels2colors(c)
g<-row.names(tab[tab$k_eq_5 == c,])
x<-melt(
dt[,c(g, 'interval'),with=F][,lapply(.SD, mean), by=interval],
id.vars = 'interval'
)
fn<-paste(
output_prefix,
n, "HClust_Lineplot.png",
sep="_"
)
ttl<-paste(n, length(g))
ggplot(x, aes(x=interval, y=value, color=variable, group=variable)) +
geom_line() + theme(legend.position = 'none') + ggtitle(ttl)
ggsave(fn)
}
