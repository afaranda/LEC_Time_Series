)
xs_len<-orig_gtf %>%
mutate( length = abs(start - end) + 1) %>%
filter( type == "exon") %>%
group_by(transcript_id) %>%
summarise(gene_id = unique(gene_id), Exons = n(), Xscript_Length=sum(length))
gn_len<-orig_gtf %>%
mutate( length = abs(start - end) + 1) %>%
filter( type == "exon" & !duplicated(exon_id)) %>%
group_by(gene_id) %>%
summarise( Exons = n(), Union_Length=sum(length))
head(gn_len)
sapply(gn_len$gene_id, function(g) length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"])))
gn_len$check<-sapply(gn_len$gene_id, function(g) length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"])))
sapply(gn_len$gene_id, function(g){print(g); length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"]})))
sapply(gn_len$gene_id, function(g){print(g); length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"]))})
check<-sapply(gn_len$gene_id, function(g) length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"])))
check<-character()
for (gn in 1:nrow(gn_len)){
print(gn)
g<-gn_len$gene_id[gn]
check<-c(check, length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"])))
}
check
for (gn in 1:nrow(gn_len)){
print(gn)
g<-gn_len$gene_id[gn]
names(check)[gn]<-g
check<-c(check, length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"])))
}
check<-character()
for (gn in 1:nrow(gn_len)){
print(gn)
g<-gn_len$gene_id[gn]
names(check)[gn]<-g
check<-c(check, length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"])))
}
check<-character()
for (gn in 1:nrow(gn_len)){
print(gn)
g<-gn_len$gene_id[gn]
names(check)[gn]<-g
check<-c(check, length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"])))
}
check<-character()
for (gn in 1:nrow(gn_len)){
print(gn)
g<-gn_len$gene_id[gn]
check<-c(check, length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"])))
names(check)[gn]<-g
}
head(check)
check<-data.frame(V1=names(check), V2=check)
check
inner_join()
head(gn_len)
check<-data.frame(gene_id=names(check), V2=check)
inner_join(gn_len, check, by="gene_id")
check<-data.frame(gene_id=names(check), V2=check, stringsAsFactors = F)
check
check<-data.frame(gene_id=names(check), V2=check$V2, stringsAsFactors = F)
check
head(check)
ck<-data.frame(gene_id=check$V2.V1, Ex=check$V2.V2)
head(ck)
ck<-data.frame(gene_id=check$V2.V1, Ex=check$V2.V2, stringsAsFactors = F)
inner_join(gn_len, ck, by="gene_id")
ck<-inner_join(gn_len, ck, by="gene_id")
head(ck)
sum(ck$Exons - ck$Ex)
class(ck$Exons)
class(ck$Ex)
ck<-data.frame(gene_id=check$V2.V1, Ex=check$V2.V2, stringsAsFactors = F)
head(ck)
class(ck$Ex)
ck$Ex<-as.numeric(ck$Ex)
head(ck)
check<-character()
for (gn in 1:100){
print(gn)
g<-gn_len$gene_id[gn]
check<-c(check, length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"])))
names(check)[gn]<-g
}
head(check)
check<-character()
for (gn in 1:100){
print(gn)
g<-gn_len$gene_id[gn]
check<-c(check, as.numeric(length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"]))))
names(check)[gn]<-g
}
check<-data.frame(
gene_id=character(),
Ex = numeric()
)
for (gn in 1:100){
print(gn)
g<-gn_len$gene_id[gn]
check[i,1]<-g
check[i,2]<-length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"]))
}
for (gn in 1:100){
print(gn)
g<-gn_len$gene_id[gn]
check[gn,1]<-g
check[gn,2]<-length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"]))
}
warnings()
check<-data.frame(
gene_id=character(),
Ex = numeric(),
stringsAsFactors = F
)
for (gn in 1:100){
print(gn)
g<-gn_len$gene_id[gn]
check[gn,1]<-g
check[gn,2]<-length(unique(orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"]))
}
inner_join(
gn_len,
check,
by="gene_id"
) %>%
mutate(ck=abs(Exon - Ex)) %>%
summarize(sum(ck))
inner_join(
gn_len,
check,
by="gene_id"
) %>%
mutate(ck=abs(Exons - Ex)) %>%
summarize(sum(ck))
head(check)
check[1,2]<-10
inner_join(
gn_len,
check,
by="gene_id"
) %>%
mutate(ck=abs(Exons - Ex)) %>%
summarize(sum(ck))
check<-data.frame(
gene_id=character(),
Ex = numeric(),
stringsAsFactors = F
)
for (gn in 1:100){
print(gn)
g<-gn_len$gene_id[gn]
check[gn,1]<-g
check[gn,2]<-length(
unique(
orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"]
)
)
}
inner_join(
gn_len,
check,
by="gene_id"
) %>%
mutate(ck=abs(Exons - Ex)) %>%
summarize(sum(ck))
check<-data.frame(
gene_id=character(),
Ex = numeric(),
stringsAsFactors = F
)
for (gn in 1=5000:5500){
print(gn)
g<-gn_len$gene_id[gn]
check[gn,1]<-g
check[gn,2]<-length(
unique(
orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"]
)
)
}
inner_join(
gn_len,
check,
by="gene_id"
) %>%
mutate(ck=abs(Exons - Ex)) %>%
summarize(sum(ck))
check<-data.frame(
gene_id=character(),
Ex = numeric(),
stringsAsFactors = F
)
for (gn in 1=5000:5500){
print(gn)
g<-gn_len$gene_id[gn]
check[gn,1]<-g
check[gn,2]<-length(
unique(
orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"]
)
)
}
check<-data.frame(
gene_id=character(),
Ex = numeric(),
stringsAsFactors = F
)
for (gn in 5000:5500){
print(gn)
g<-gn_len$gene_id[gn]
check[gn,1]<-g
check[gn,2]<-length(
unique(
orig_gtf[orig_gtf$gene_id == g & orig_gtf$type == "exon", "exon_id"]
)
)
}
inner_join(
gn_len,
check,
by="gene_id"
) %>%
mutate(ck=abs(Exons - Ex)) %>%
summarize(sum(ck))
lenTable<-inner_join(
xs_len,
gn_len,
by ="gene_id"
)
head(lenTable)
nrow(lenTable)
length(unique(lenTable$gene_id))
xs_len<-orig_gtf %>%
mutate( length = abs(start - end) + 1) %>%
filter( type == "exon") %>%
group_by(transcript_id) %>%
summarise(gene_id = unique(gene_id), Xscript_Exons = n(), Xscript_Length=sum(length))
gn_len<-orig_gtf %>%
mutate( length = abs(start - end) + 1) %>%
filter( type == "exon" & !duplicated(exon_id)) %>%
group_by(gene_id) %>%
summarise( Union_Exons = n(), Union_Length=sum(length))
lenTable<-inner_join(
xs_len,
gn_len,
by ="gene_id"
)
lenTable %>% filter(gene_id == "ENSMUSG00000000028")
orig_gtf %>% filter(gene_id == "ENSMUSG00000000028" & type="transcript")
orig_gtf %>% filter(gene_id == "ENSMUSG00000000028" & type=="transcript")
18780447 - 18811972
abs(18780447 - 18811972)
orig_gtf %>% filter(gene_id == "ENSMUST00000000028" & type=="exon")
orig_gtf %>% filter(transcript_id == "ENSMUST00000000028" & type=="exon")
orig_gtf %>% filter(transcript_id == "ENSMUST00000000028" & type=="exon") %>% mutate(len = abs(end - start)+1)
sum((orig_gtf %>% filter(transcript_id == "ENSMUST00000000028" & type=="exon") %>% mutate(len = abs(end - start)+1))$len)
lengthTable<-function(gtfpath){
orig_gtf<-readGFF(gtfpath)
xs_len<-orig_gtf %>%
mutate( length = abs(start - end) + 1) %>%
filter( type == "exon") %>%
group_by(transcript_id) %>%
summarise(gene_id = unique(gene_id), Xscript_Exons = n(), Xscript_Length=sum(length))
gn_len<-orig_gtf %>%
mutate( length = abs(start - end) + 1) %>%
filter( type == "exon" & !duplicated(exon_id)) %>%
group_by(gene_id) %>%
summarise( Union_Exons = n(), Union_Length=sum(length))
lenTable<-inner_join(
xs_len,
gn_len,
by ="gene_id"
)
}
lt<-lengthTable(gtfpath)
#################################################################################
#   Functions to tabulate gene and transcript lengths (exon union) from gtf     #
#################################################################################
gtfpath<-"/home/adam/Documents/LTS_Data/Mus_musculus.GRCm38.96.chr.gtf"
lt<-lengthTable(gtfpath)
head(lt)
head(as.data.frame(lt))
class(head(as.data.frame(lt))$gene_id)
lengthTable<-function(gtfpath){
orig_gtf<-readGFF(gtfpath)
xs_len<-orig_gtf %>%
mutate( length = abs(start - end) + 1) %>%
filter( type == "exon") %>%
group_by(transcript_id) %>%
summarise(gene_id = unique(gene_id), Xscript_Exons = n(), Xscript_Length=sum(length))
gn_len<-orig_gtf %>%
mutate( length = abs(start - end) + 1) %>%
filter( type == "exon" & !duplicated(exon_id)) %>%
group_by(gene_id) %>%
summarise( Union_Exons = n(), Union_Length=sum(length))
as.data.frame(
lenTable<-inner_join(
xs_len,
gn_len,
by ="gene_id"
),
stringsAsFactors=
)
}
class(head(as.data.frame(lt, stringsAsFactors=F))$gene_id)
head(as.data.frame(lt, stringsAsFactors=F))
lengthTable<-function(gtfpath){
orig_gtf<-readGFF(gtfpath)
xs_len<-orig_gtf %>%
mutate( length = abs(start - end) + 1) %>%
filter( type == "exon") %>%
group_by(transcript_id) %>%
summarise(gene_id = unique(gene_id), Xscript_Exons = n(), Xscript_Length=sum(length))
gn_len<-orig_gtf %>%
mutate( length = abs(start - end) + 1) %>%
filter( type == "exon" & !duplicated(exon_id)) %>%
group_by(gene_id) %>%
summarise( Union_Exons = n(), Union_Length=sum(length))
as.data.frame(
lenTable<-inner_join(
xs_len,
gn_len,
by ="gene_id"
),
stringsAsFactors=F
)
}
lt<-lengthTable(gtfpath)
head(lt)
lt %>% filter(gene_id == ENSMUSG00000048583)
lt %>% filter(gene_id == "ENSMUSG00000048583")
any(lt$Xscript_Length > lt$Union_Length)
any(lt$Xscript_Exons > lt$Union_Exons)
min(lt$Union_Length)
x<-matrix(1:20, nrow=4, ncol=5)
colnames(x)<-c("ted", "jim", "bob", "phil", "greg")
x
rownames(x)<-c("March", "April", "May", "June")
x
x[1]
x[,1]
x[1,]
x[,1]
x[1,1]
x[,2]
x[,3]
x[,5]
x[,4]
colNum(x, "jim")
colNum<-function(df, n){
positions<-c()
for(i in n){
positions<-c(
positions,
grep(i, names(df))
)
}
positions
}
colNum(x, "jim")
colNum(as.data.frame(x), "jim")
names(x)
colnames(x)
colnames(as.data.frame(x))
colNum<-function(df, n){
positions<-c()
for(i in n){
positions<-c(
positions,
grep(i, colnames(df))
)
}
positions
}
colNum(x, "jim")
colNum(x, c("grem", jim"))
)
)
)
""
colNum(x, c("grem", "jim"))
colNum(x, c("grem"))
colNum(x, c("greg", "jim"))
colNum(x, c("greg", "ted", "jim"))
colSums
colsums
x
basicCPM<-function(x){
cs<-colSums(x)
for (i in setdiff(1:ncol(x), idCol)){
x[,i]<-(x[,i] / cs[i-1]) * 1000000
}
x
}
x * 100000
basicCPM<-function(x){
cs<-colSums(x)
for (i in 1:ncol(x)){
x[,i]<-(x[,i] / cs[i-1]) * 1000000
}
x
}
basicCPM(x)
basicCPM(x)
basicCPM<-function(x){
cs<-colSums(x)
for (i in 1:ncol(x)){
x[,i]<-(x[,i] / cs[i]) * 1000000
}
x
}
basicCPM(x)
x
sum(5,6,7,8)
5/26
6/26
7/26
8/26
sum(13,14,15,16)
13/58
16/58
x
row.names(x)
rownames(x)
################################################################################
# File: NormalizationFunctions.R                                               #
# Purpose: Implement various normalization strategies as functions. Each       #
#          function takes a count matrix as input and returns a matrix of      #
#          normalized counts                                                   #
# Created: April 30, 2019                                                      #
# Author: Adam Faranda                                                         #
################################################################################
library(edgeR)
################################################################################
# File: NormalizationFunctions.R                                               #
# Purpose: Implement various normalization strategies as functions. Each       #
#          function takes a count matrix as input and returns a matrix of      #
#          normalized counts                                                   #
# Created: April 30, 2019                                                      #
# Author: Adam Faranda                                                         #
################################################################################
library(edgeR)
library(BiocInstaller)
biocLite('edgeR')
library(edgeR)
x <-matrix(rpois(1000, 35000), nrow=100, ncol=10)
x
basicCPM(x)
basicCPM<-function(x){
cs<-colSums(x)
for (i in 1:ncol(x)){
x[,i]<-(x[,i] / cs[i]) * 1000000
}
x
}
basicCPM(x)
rpois(100, 26)
rpois(100, 10)
letters(rpois(100, 10))
letters[rpois(100, 10)]
LETTERS[rpois(100, 10)]
paste(LETTERS[rpois(100, 10)], LETTERS[rpois(100, 5)], LETTERS[rpois(100, 20)])
paste(LETTERS[rpois(100, 10)], LETTERS[rpois(100, 5)], LETTERS[rpois(100, 20)], sep="")
row.names(x)<-paste(LETTERS[rpois(100, 10)], LETTERS[rpois(100, 5)], LETTERS[rpois(100, 20)], sep="")
x
colnames(x)<-paste("sample", 1:ncol(x),sep="_")
x
edgeRcpm(x)
edgeRcpm<-function(x, prior=2){
y<-DGEList(
counts = x,
genes = row.names(x)
)
y<-calcNormFactors(y)
x<2^cpm(y, prior.count=prior, log=T)
print(head(x))
}
edgeRcpm(x)
head(x)
x
rownames(x)<-paste(rownames(x), 1:nrow(x), sep="")
edgeRcpm(x)
x
edgeRcpm(x)
head(x)
edgeRcpm<-function(x, prior=2){
y<-DGEList(
counts = x,
genes = row.names(x)
)
y<-calcNormFactors(y)
x<2^cpm(y, prior.count=prior, log=T)
print(head(x))
x
}
head(x)
edgeRcpm(x)
edgeRcpm<-function(x, prior=2){
y<-DGEList(
counts = x,
genes = row.names(x)
)
y<-calcNormFactors(y)
x<-2^cpm(y, prior.count=prior, log=T)
print(head(x))
x
}
edgeRcpm(x)
basicCPM(x)
x
x
head(x)
