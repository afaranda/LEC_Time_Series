dev.off()
}
for( lfc in c(2, 5, 7)){
# Get list of genes meeting key criteria
like<-as.character(
(
deg %>%
filter(logCPM > 2 & FDR < 0.05) %>%
filter(
abs(logFC.group6H) > lfc |
abs(logFC.group24H) > lfc |
abs(logFC.group48H) > lfc |
abs(logFC.group120H) > lfc
)
)$gene_id
)
# Plot results selected by fold change level
f1<-paste('ECPM_Samples_logFC_', lfc,'_',length(like),'_Significant_genes_Class.png')
f2<-paste('ECPM_Samples_logFC_', lfc,'_',length(like),'_Significant_genes_Lab.png')
f3<-paste('ECPM_Samples_logFC_', lfc,'_',length(like),'_Significant_genes_Clusters.png')
png(f1, width=480, height=300)
print(plotPrinComp(ecpm[like,], dge$samples, groupCol=1, idCol=0))
dev.off()
png(f2, width=480, height=300)
print(plotPrinComp(ecpm[like,], dge$samples, groupCol=7, idCol=0))
dev.off()
png(f3, width=1200, height = 800)
pheatmap(
log(ecpm[like,]),
annotation_col = dge$samples[,c('group', 'batch')],
show_rownames = F, fontsize=20, cellwidth = 5
)
dev.off()
}
for( lfc in c(2, 5, 7)){
# Get list of genes meeting key criteria
like<-as.character(
(
deg %>%
filter(logCPM > 2 & FDR < 0.05) %>%
filter(
abs(logFC.group6H) > lfc |
abs(logFC.group24H) > lfc |
abs(logFC.group48H) > lfc |
abs(logFC.group120H) > lfc
)
)$gene_id
)
# Plot results selected by fold change level
f1<-paste('ECPM_Samples_logFC_', lfc,'_',length(like),'_Significant_genes_Class.png')
f2<-paste('ECPM_Samples_logFC_', lfc,'_',length(like),'_Significant_genes_Lab.png')
f3<-paste('ECPM_Samples_logFC_', lfc,'_',length(like),'_Significant_genes_Clusters.png')
png(f1, width=480, height=300)
print(plotPrinComp(ecpm[like,], dge$samples, groupCol=1, idCol=0))
dev.off()
png(f2, width=480, height=300)
print(plotPrinComp(ecpm[like,], dge$samples, groupCol=7, idCol=0))
dev.off()
png(f3, width=1200, height = 800)
pheatmap(
log(ecpm[like,]),
annotation_col = dge$samples[,c('group', 'batch')],
show_rownames = F, fontsize=20, cellwidth = 20
)
dev.off()
}
source('~/Documents/LEC_Time_Series/transcriptomic_analysis_scripts/TimeSeriesAnalysis.R')
head(htseq_count)
library('AnnotationHub')
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
# Run Query to find proper Annotation Set:
#AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
############################ Setup Environment #################################
setwd('/home/adam/Documents/LEC_Time_Series')
#load("GeneLengthTable.Rdata")
library(dplyr)
library(cluster)
library(reshape2)
wd<-getwd()
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
source('transcriptomic_analysis_scripts/PreprocessingFunctions.R')
source('transcriptomic_analysis_scripts/PrincipalComponents.R')
source('transcriptomic_analysis_scripts/ClusteringFunctions.R')
############################ Load in Data Files ################################
dl<-"~/Documents/LEC_Time_Series_HTSeq_Counts"
# ft<-hc_getFileTable(
#   dirList=dl, filename = "HTSeq_GeneCounts_All.csv"
# )
# ft<-hc_getFileTable(
#   dirList=dl, filename = "HTSeq_GeneCounts_Wildtype.csv"
# )
ft<-hc_getFileTable(
dirList=dl, filename = "HTSeq_GeneCounts_Wildtype.csv"
)
ds<-hc_loadFiles(ft)
ft<-hc_identifierConsistency(ds, ft)
library('AnnotationHub')
lt<-read.table(
paste(dl,"gene_coding_lengths.txt", sep='/'),
header = T
)
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
#AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=gt$gene_id,
columns = c("SYMBOL", "DESCRIPTION"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
row.names(lt)<-lt$gene_id
rm(ah, edb)
detach(package:AnnotationHub, unload=T)
detach(package:ensembldb, unload=T)
detach(package:AnnotationFilter, unload=T)
################################################################################
# File: TimeSeriesAnalysis.R                                                   #
# Purpose: Identify gene clusters that correspond to temporal patterns.        #
# Created: May 1, 2019                                                         #
# Author: Adam Faranda                                                         #
################################################################################
############################ Setup Environment #################################
setwd('/home/adam/Documents/LEC_Time_Series')
#load("GeneLengthTable.Rdata")
library(dplyr)
library(cluster)
library(reshape2)
wd<-getwd()
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
source('transcriptomic_analysis_scripts/PreprocessingFunctions.R')
source('transcriptomic_analysis_scripts/PrincipalComponents.R')
source('transcriptomic_analysis_scripts/ClusteringFunctions.R')
############################ Load in Data Files ################################
dl<-"~/Documents/LEC_Time_Series_HTSeq_Counts"
# ft<-hc_getFileTable(
#   dirList=dl, filename = "HTSeq_GeneCounts_All.csv"
# )
# ft<-hc_getFileTable(
#   dirList=dl, filename = "HTSeq_GeneCounts_Wildtype.csv"
# )
ft<-hc_getFileTable(
dirList=dl, filename = "HTSeq_GeneCounts_Wildtype.csv"
)
ds<-hc_loadFiles(ft)
ft<-hc_identifierConsistency(ds, ft)
library('AnnotationHub')
lt<-read.table(
paste(dl,"gene_coding_lengths.txt", sep='/'),
header = T
)
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
#AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=lt$gene_id,
columns = c("SYMBOL", "DESCRIPTION"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
row.names(lt)<-lt$gene_id
rm(ah, edb)
detach(package:AnnotationHub, unload=T)
detach(package:ensembldb, unload=T)
detach(package:AnnotationFilter, unload=T)
head(lt)
library('AnnotationHub')
# Run Query to find proper Annotation Set:
#AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
#AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=lt$gene_id,
columns = c("SYMBOL", "DESCRIPTION"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
lt
head(lt)
class(lt$gene_id)
lt<-read.table(
paste(dl,"gene_coding_lengths.txt", sep='/'),
header = T, stringsAsFactors = F
)
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
#AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=lt$gene_id,
columns = c("SYMBOL", "DESCRIPTION"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
head(lt)
lt<-read.table(
paste(dl,"gene_coding_lengths.txt", sep='/'),
header = T, stringsAsFactors = F
)
################################################################################
# File: TimeSeriesAnalysis.R                                                   #
# Purpose: Identify gene clusters that correspond to temporal patterns.        #
# Created: May 1, 2019                                                         #
# Author: Adam Faranda                                                         #
################################################################################
############################ Setup Environment #################################
setwd('/home/adam/Documents/LEC_Time_Series')
#load("GeneLengthTable.Rdata")
library(dplyr)
library(cluster)
library(reshape2)
wd<-getwd()
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
source('transcriptomic_analysis_scripts/PreprocessingFunctions.R')
source('transcriptomic_analysis_scripts/PrincipalComponents.R')
source('transcriptomic_analysis_scripts/ClusteringFunctions.R')
############################ Load in Data Files ################################
dl<-"~/Documents/LEC_Time_Series_HTSeq_Counts"
# ft<-hc_getFileTable(
#   dirList=dl, filename = "HTSeq_GeneCounts_All.csv"
# )
# ft<-hc_getFileTable(
#   dirList=dl, filename = "HTSeq_GeneCounts_Wildtype.csv"
# )
ft<-hc_getFileTable(
dirList=dl, filename = "HTSeq_GeneCounts_Wildtype.csv"
)
ds<-hc_loadFiles(ft)
ft<-hc_identifierConsistency(ds, ft)
library('AnnotationHub')
lt<-read.table(
paste(dl,"gene_coding_lengths.txt", sep='/'),
header = T, stringsAsFactors = F
)
nrow(lt)
library('AnnotationHub')
lt<-read.table(
paste(dl,"gene_coding_lengths.txt", sep='/'),
header = T, stringsAsFactors = F
)
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
#AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=lt$gene_id,
columns = c("SYMBOL", "DESCRIPTION"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
row.names(lt)<-lt$gene_id
rm(ah, edb)
detach(package:AnnotationHub, unload=T)
detach(package:ensembldb, unload=T)
detach(package:AnnotationFilter, unload=T)
nrow(lt)
head(lt)
?filterByExpr
filterByExpr
head(ecpm)
################################################################################
# File: TimeSeriesAnalysis.R                                                   #
# Purpose: Identify gene clusters that correspond to temporal patterns.        #
# Created: May 1, 2019                                                         #
# Author: Adam Faranda                                                         #
################################################################################
############################ Setup Environment #################################
setwd('/home/adam/Documents/LEC_Time_Series')
#load("GeneLengthTable.Rdata")
library(dplyr)
library(cluster)
library(reshape2)
wd<-getwd()
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
source('transcriptomic_analysis_scripts/PreprocessingFunctions.R')
source('transcriptomic_analysis_scripts/PrincipalComponents.R')
source('transcriptomic_analysis_scripts/ClusteringFunctions.R')
############################ Load in Data Files ################################
dl<-"~/Documents/LEC_Time_Series_HTSeq_Counts"
# ft<-hc_getFileTable(
#   dirList=dl, filename = "HTSeq_GeneCounts_All.csv"
# )
# ft<-hc_getFileTable(
#   dirList=dl, filename = "HTSeq_GeneCounts_Wildtype.csv"
# )
ft<-hc_getFileTable(
dirList=dl, filename = "HTSeq_GeneCounts_Wildtype.csv"
)
ds<-hc_loadFiles(ft)
ft<-hc_identifierConsistency(ds, ft)
library('AnnotationHub')
lt<-read.table(
paste(dl,"gene_coding_lengths.txt", sep='/'),
header = T, stringsAsFactors = F
)
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
#AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=lt$gene_id,
columns = c("SYMBOL", "DESCRIPTION"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
row.names(lt)<-lt$gene_id
rm(ah, edb)
detach(package:AnnotationHub, unload=T)
detach(package:ensembldb, unload=T)
detach(package:AnnotationFilter, unload=T)
# Setup an edgeR DGE List to keep everything organized
htseq_count<-hc_buildDataFrame(ds, ft)
dge<-DGEList(
htseq_count,
samples=ft,
genes=lt[row.names(htseq_count),]
)
# Reorder grouping factor, drop unused levels
dge$samples$group<-droplevels(
factor(
paste(dge$samples$hours.pcs, 'H', sep=''),
levels = c('0H', '6H', '24H','48H', '120H')
)
)
# Build design matrix with batch coveriate
design<-model.matrix(~group + batch, dge$samples)
dge<-dge[filterByExpr(dge, design=design),]
dge$genes$Var<-apply(dge$counts, 1, var)
# Get statistical significance
dge<-estimateCommonDisp(dge)
dge<-estimateTagwiseDisp(dge)
dge<-calcNormFactors(dge)
# Calcuate Statistical Significance (Gene DE at ANY Timepoint)
fit<-glmFit(dge, design)
qlf<-glmLRT(fit, coef=2:5)
deg<-as.data.frame(topTags(qlf, n=Inf))
############# Generate Cpm Matrix for clustering ############################
mat<-as.data.frame(dge$counts)
ecpm<-edgeRcpm(mat)                     # Normalize using edgeR's TMM method
############## Apply LogFC Filters; Plot Principal Components ###############
varRanks <-c(10, 50, 100, 500)                # Try different variance filters
for( v in varRanks){
print(v)
ecpm.filter <-varianceFilter(ecpm, threshold=v)
# Plot results for TMM Normalized Data -- selected by variance
f1<-paste('ECPM_Samples_Top_', v,'_Variance_Class.png')
f2<-paste('ECPM_Samples_Top_', v,'_Variance_Lab.png')
f3<-paste('ECPM_Samples_Top_', v,'_Variance_Clusters.png')
png(f1, width=480, height=300)
print(plotPrinComp(ecpm.filter, dge$samples, groupCol=1, idCol=0))
dev.off()
png(f2, width=480, height=300)
print(plotPrinComp(ecpm.filter, dge$samples, groupCol=7, idCol=0))
dev.off()
png(f3, width=1200, height = 800)
pheatmap(
log(ecpm.filter),
annotation_col = dge$samples[,c('group', 'batch')],
show_rownames = F, fontsize=20, cellwidth = 20
)
dev.off()
}
for( lfc in c(2, 5, 7)){
# Get list of genes meeting key criteria
like<-as.character(
(
deg %>%
filter(logCPM > 2 & FDR < 0.05) %>%
filter(
abs(logFC.group6H) > lfc |
abs(logFC.group24H) > lfc |
abs(logFC.group48H) > lfc |
abs(logFC.group120H) > lfc
)
)$gene_id
)
# Plot results selected by fold change level
f1<-paste('ECPM_Samples_logFC_', lfc,'_',length(like),'_Significant_genes_Class.png')
f2<-paste('ECPM_Samples_logFC_', lfc,'_',length(like),'_Significant_genes_Lab.png')
f3<-paste('ECPM_Samples_logFC_', lfc,'_',length(like),'_Significant_genes_Clusters.png')
png(f1, width=480, height=300)
print(plotPrinComp(ecpm[like,], dge$samples, groupCol=1, idCol=0))
dev.off()
png(f2, width=480, height=300)
print(plotPrinComp(ecpm[like,], dge$samples, groupCol=7, idCol=0))
dev.off()
png(f3, width=1200, height = 800)
pheatmap(
log(ecpm[like,]),
annotation_col = dge$samples[,c('group', 'batch')],
show_rownames = F, fontsize=20, cellwidth = 20
)
dev.off()
}
head(ecpm)
min(ecpm)
min(cpm(dge))
nrow(dge)
min(dge$counts)
rowsums(dge)
rowsum(dge)
rowsums(dge, dge$samples$group)
rowsum(dge, dge$samples$group)
?rowsum
rowsum(dge$counts, dge$samples$group)
rowsum(dge$count)
rowsum(dge$count, group=rep(1,ncol(dge$count)))
cowsum(dge$count, group=rep(1,ncol(dge$count)))
colsum(dge$count, group=rep(1,ncol(dge$count)))
x <- matrix(runif(100), ncol = 5)
x
group <- sample(1:8, 20, TRUE)
group
group <- sample(1:8, 20, TRUE)
rowsum(x, group)
colSums(dge)
colSums(dge$counts)
colSums(dge$counts)<10
rowSums(dge$counts)
rowSums(dge$counts) < 10
dge[rowSums(dge$counts) < 10,]
dge[rowSums(dge$counts) < 12,]
dge[rowSums(dge$counts) < 20,]
dge[rowSums(dge$counts) < 100,]
dge[rowSums(dge$counts) < 50,]
dge[rowSums(dge$counts) < 100,]
?filterByExpr
dge[rowSums(dge$counts) < 50,]
cpm(dge[rowSums(dge$counts) < 50,])
############################ Setup Environment #################################
setwd('/home/adam/Documents/LEC_Time_Series')
#load("GeneLengthTable.Rdata")
library(dplyr)
library(cluster)
library(reshape2)
wd<-getwd()
source('transcriptomic_analysis_scripts/BuildDataMatrix.R')
source('transcriptomic_analysis_scripts/PreprocessingFunctions.R')
source('transcriptomic_analysis_scripts/PrincipalComponents.R')
source('transcriptomic_analysis_scripts/ClusteringFunctions.R')
dl<-"~/Documents/LEC_Time_Series_HTSeq_Counts"
# ft<-hc_getFileTable(
#   dirList=dl, filename = "HTSeq_GeneCounts_All.csv"
# )
# ft<-hc_getFileTable(
#   dirList=dl, filename = "HTSeq_GeneCounts_Wildtype.csv"
# )
ft<-hc_getFileTable(
dirList=dl, filename = "HTSeq_GeneCounts_Wildtype.csv"
)
ds<-hc_loadFiles(ft)
ft<-hc_identifierConsistency(ds, ft)
library('AnnotationHub')
lt<-read.table(
paste(dl,"gene_coding_lengths.txt", sep='/'),
header = T, stringsAsFactors = F
)
ah<-AnnotationHub()
# Run Query to find proper Annotation Set:
#AnnotationHub::query(ah, pattern=c("EnsDb", "Mus musculus", "98"))
edb<-ah[['AH75036']]
lt<-merge(
lt, AnnotationDbi::select(
edb, keys=lt$gene_id,
columns = c("SYMBOL", "DESCRIPTION"),
keytype = "GENEID"
),
by.x = 'gene_id', by.y='GENEID'
)
row.names(lt)<-lt$gene_id
rm(ah, edb)
detach(package:AnnotationHub, unload=T)
detach(package:ensembldb, unload=T)
detach(package:AnnotationFilter, unload=T)
# Setup an edgeR DGE List to keep everything organized
htseq_count<-hc_buildDataFrame(ds, ft)
dge<-DGEList(
htseq_count,
samples=ft,
genes=lt[row.names(htseq_count),]
)
# Reorder grouping factor, drop unused levels
dge$samples$group<-droplevels(
factor(
paste(dge$samples$hours.pcs, 'H', sep=''),
levels = c('0H', '6H', '24H','48H', '120H')
)
)
# Build design matrix with batch coveriate
design<-model.matrix(~group + batch, dge$samples)
odg<-dge
head(rpkm(odg))
head(cpm(odg))
